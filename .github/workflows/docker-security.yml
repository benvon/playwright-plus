name: Docker Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate matrix from Dockerfiles
        id: set-matrix
        run: |
          # Find all Dockerfile.* files in the repository root
          files=$(find . -maxdepth 1 -name 'Dockerfile.*' -type f)
          echo "Found Dockerfiles:"
          echo "$files"
          matrix="{\"include\":["
          sep=""
          for file in $files; do
            # Extract the suffix after "Dockerfile."
            tag=$(basename "$file")
            tag=${tag#Dockerfile.}
            # If no tag found, use a default value
            [ -z "$tag" ] && tag="default"
            # Remove any leading "./"
            dockerfile=$(echo "$file" | sed 's|^\./||')
            matrix="$matrix$sep{\"dockerfile\":\"$dockerfile\",\"image_tag\":\"$tag\"}"
            sep=","
          done
          matrix="$matrix]}"
          echo "Generated matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  security-scan:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # Build image locally for scanning
      - name: Build Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          file: Dockerfile.${{ matrix.playwright }}
          load: true  # Load the image locally instead of pushing
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.playwright }}-test-security
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: trivy
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.playwright }}-test-security
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-dirs: '/root/.npm/_cacache/content-v2'
          trivy-config: |
            scan:
              scanners:
                - vuln
              pkg-types:
                - os
                - library

      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: Dockerfile
          format: json
          output-file: ./hadolint-results.json

      - name: Install Dockle
        run: |
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb

      - name: Run Dockle
        id: dockle
        continue-on-error: true
        run: |
          dockle --format json --timeout 600s --output dockle-results.json --ignore CIS-DI-0001 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.playwright }}-test-security

      - name: Container Structure Test
        id: container_test
        continue-on-error: true
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.playwright }}-test-security
          config: .container-structure-test.yaml
