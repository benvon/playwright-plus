name: Docker Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # Build image locally for scanning
      - name: Build Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          load: true  # Load the image locally instead of pushing
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-security
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: trivy
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-security
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-dirs: '/root/.npm/_cacache/content-v2'
          trivy-config: |
            scan:
              scanners:
                - vuln
              pkg-types:
                - os
                - library

      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: Dockerfile
          format: json
          output-file: ./hadolint-results.json

      - name: Install Dockle
        run: |
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb

      - name: Run Dockle
        id: dockle
        continue-on-error: true
        run: |
          dockle --format json --timeout 600s --output dockle-results.json --ignore CIS-DI-0001 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-security

      - name: Container Structure Test
        id: container_test
        continue-on-error: true
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-security
          config: .container-structure-test.yaml

      - name: Update README with security results
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          # Get current date
          DATE=$(date '+%Y-%m-%d')
          
          # Process results and create summary
          TRIVY_VULNS=$(jq '.Results[].Vulnerabilities | length // 0' trivy-results.json | jq -s 'add // 0')
          HADOLINT_ISSUES=$(jq '. | length // 0' hadolint-results.json)
          DOCKLE_ISSUES=$(jq '.Failures | length // 0' dockle-results.json)
          
          # Create security section
          SECURITY_SECTION="## Security Scan Results\n\nLast updated: ${DATE}\n\n"
          SECURITY_SECTION+="| Tool | Status | Issues |\n"
          SECURITY_SECTION+="| ---- | ------ | ------ |\n"
          SECURITY_SECTION+="| Trivy | ${{ steps.trivy.outcome == 'success' && '✅' || '⚠️' }} | ${TRIVY_VULNS} vulnerabilities |\n"
          SECURITY_SECTION+="| Hadolint | ${{ steps.hadolint.outcome == 'success' && '✅' || '⚠️' }} | ${HADOLINT_ISSUES} issues |\n"
          SECURITY_SECTION+="| Dockle | ${{ steps.dockle.outcome == 'success' && '✅' || '⚠️' }} | ${DOCKLE_ISSUES} warnings |\n"
          SECURITY_SECTION+="| Container Structure | ${{ steps.container_test.outcome == 'success' && '✅' || '⚠️' }} | - |\n"
          
          # Update README.md
          if grep -q "## Security Scan Results" README.md; then
            # Replace existing section
            sed -i "/## Security Scan Results/,/^##/c\\${SECURITY_SECTION}" README.md
          else
            # Add new section before the first ## or at the end if no ## exists
            if grep -q "^##" README.md; then
              sed -i "0,/^##/{/^##/i\\${SECURITY_SECTION}\\n}" README.md
            else
              echo -e "\n${SECURITY_SECTION}" >> README.md
            fi
          fi
          
          # Commit and push changes
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m "docs: update security scan results [skip ci]"
          git push 