name: Docker Security Scan

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.check-versions.outputs.matrix }}
      has_new_versions: ${{ steps.check-versions.outputs.has_new_versions }}
    steps:
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new versions
        id: check-versions
        run: |
          # Get latest 3 Playwright versions
          VERSIONS=$(npm view playwright versions --json | jq -r '.[]' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 3)
          
          # Initialize arrays for new versions and tags to build
          VERSIONS_TO_BUILD=()
          HAS_NEW_VERSIONS="false"
          
          # Check each version against existing security scan tag
          while IFS= read -r version; do
            TAG="security-${version}"
            if ! docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG} >/dev/null 2>&1; then
              echo "New version for security scan detected: ${TAG}"
              VERSIONS_TO_BUILD+=("${version}")
              HAS_NEW_VERSIONS="true"
            else
              echo "Security scan tag already exists: ${TAG}"
            fi
          done <<< "$VERSIONS"
          
          # Output the versions as JSON array for matrix
          if [ ${#VERSIONS_TO_BUILD[@]} -eq 0 ]; then
            echo "No new versions to scan"
            echo 'matrix={"version":[]}' >> $GITHUB_OUTPUT
          else
            # Create a JSON array with properly quoted version strings
            VERSIONS_JSON=$(printf '%s\n' "${VERSIONS_TO_BUILD[@]}" | jq -R -s -c 'split("\n")[:-1]')
            echo "matrix={\"version\":$VERSIONS_JSON}" >> $GITHUB_OUTPUT
          fi
          echo "has_new_versions=${HAS_NEW_VERSIONS}" >> $GITHUB_OUTPUT

      # - name: Set matrix
      #   id: set-matrix
      #   run: |
      #     if [ "${{ steps.check-versions.outputs.has_new_versions }}" = "true" ]; then
      #       echo "matrix=${{ steps.check-versions.outputs.matrix }}" >> $GITHUB_OUTPUT
      #     else
      #       echo 'matrix={"version":[]}' >> $GITHUB_OUTPUT
      #     fi

  security-scan:
    needs: check-versions
    if: needs.check-versions.outputs.has_new_versions == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.check-versions.outputs.matrix) }}
      fail-fast: false
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate test tag
        id: test_tag
        run: |
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-${{ matrix.version }}" >> $GITHUB_OUTPUT

      # Build image locally for scanning
      - name: Build Docker image
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          load: true
          tags: ${{ steps.test_tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PLAYWRIGHT_VERSION=${{ matrix.version }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: trivy
        continue-on-error: true
        with:
          image-ref: ${{ steps.test_tag.outputs.tag }}
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-dirs: '/root/.npm/_cacache/content-v2'
          trivy-config: |
            scan:
              scanners:
                - vuln
              pkg-types:
                - os
                - library

      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: Dockerfile
          format: json
          output-file: ./hadolint-results.json

      - name: Install Dockle
        run: |
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb

      - name: Run Dockle
        id: dockle
        continue-on-error: true
        run: |
          dockle --format json --timeout 600s --output dockle-results.json --ignore CIS-DI-0001 ${{ steps.test_tag.outputs.tag }}

      - name: Container Structure Test
        id: container_test
        continue-on-error: true
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ steps.test_tag.outputs.tag }}
          config: .container-structure-test.yaml
