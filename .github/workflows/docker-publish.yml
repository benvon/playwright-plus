name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '30 9 * * 0'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.check-versions.outputs.matrix }}
      has_new_versions: ${{ steps.check-versions.outputs.has_new_versions }}
    steps:
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new versions
        id: check-versions
        run: |
          # Get latest 3 Playwright versions
          VERSIONS=$(npm view playwright versions --json | jq -r '.[]' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 20)
          
          # Initialize arrays for new versions and tags to build
          VERSIONS_TO_BUILD=()
          HAS_NEW_VERSIONS="false"
          
          # Determine the tag prefix based on the event type
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG_PREFIX="${GITHUB_REF#refs/tags/}-"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            TAG_PREFIX="latest-"
          else
            PR_NUMBER=$(echo $GITHUB_REF | sed 's/refs\/pull\/\([0-9]*\)\/merge/\1/')
            TAG_PREFIX="pr-${PR_NUMBER}-"
          fi
          
          # Check each version against existing images
          while IFS= read -r version; do
            TAG="${TAG_PREFIX}${version}"
            if ! docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG} >/dev/null 2>&1; then
              echo "New version/tag combination detected: ${TAG}"
              VERSIONS_TO_BUILD+=("${version}")
              HAS_NEW_VERSIONS="true"
            else
              echo "Tag already exists: ${TAG}"
            fi
          done <<< "$VERSIONS"
          
          # Output the versions as JSON array for matrix
          if [ ${#VERSIONS_TO_BUILD[@]} -eq 0 ]; then
            echo "No new versions to build"
            echo "matrix={\"version\":[]}" >> $GITHUB_OUTPUT
          else
            VERSIONS_JSON=$(printf '%s\n' "${VERSIONS_TO_BUILD[@]}" | jq -R -s -c 'split("\n")[:-1]')
            echo "matrix={\"version\":$VERSIONS_JSON}" >> $GITHUB_OUTPUT
          fi
          echo "has_new_versions=${HAS_NEW_VERSIONS}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: check-versions
    if: >
      needs.check-versions.outputs.has_new_versions == 'true' &&
      (github.event_name != 'schedule' ||
       (github.event_name == 'schedule' && needs.check-versions.outputs.has_new_versions == 'true'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.check-versions.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tag
        id: tags
        run: |
          # For git tags (releases)
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            GIT_TAG=${GITHUB_REF#refs/tags/}
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GIT_TAG}-${{ matrix.version }}" >> $GITHUB_OUTPUT
          # For main branch
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.version }}" >> $GITHUB_OUTPUT
          # For pull requests
          else
            PR_NUMBER=$(echo $GITHUB_REF | sed 's/refs\/pull\/\([0-9]*\)\/merge/\1/')
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${PR_NUMBER}-${{ matrix.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PLAYWRIGHT_VERSION=${{ matrix.version }}
